import streamlit as st
import pandas as pd
import numpy as np
import time

# # AI-Assisted App Structure Setup
st.set_page_config(
    page_title="NASA Exoplanet Classifier",
    page_icon="üöÄ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# # AI-GENERATED: Custom CSS Function for Space-Themed Styling
def local_css():
    st.markdown("""
        <style>
        /* Space-inspired colors - Complex styling often generated by AI */
        .stButton>button {
            color: #0c101c;
            background-color: #fcd34d; /* Star Yellow */
            font-weight: bold;
            border: 0px;
            border-radius: 8px;
            padding: 10px 24px;
            box-shadow: 0 4px #b48e30;
            transition: all 0.2s;
        }
        .stButton>button:hover {
            background-color: #ffeb99;
            box-shadow: 0 2px #b48e30;
            transform: translateY(2px);
        }
        
        /* Enhanced Main Title with icons */
        .main-title {
            color: #22d3ee; /* Planet Cyan */
            font-size: 2.5rem;
            font-weight: 800;
            display: flex;
            align-items: center;
        }

        /* Sidebar - Make darker/consistent */
        section[data-testid="stSidebar"] {
            background-color: #0c101c; /* NASA Blue */
            color: #FFFFFF;
        }
        
        /* Model Status (green/yellow) */
        .stAlert {
            border-radius: 8px;
        }

        /* Sidebar Container */
        [data-testid="stSidebarContent"] {
            padding-top: 2rem;
        }
        
        </style>
        """, unsafe_allow_html=True) # Necessary for injecting custom HTML/CSS

local_css()

# # AI-GENERATED MOCK MODEL: Simulates the inference of an actual ML/AI model
def mock_classification(params):
    # Simulate inference time
    time.sleep(1.5)
    # Simple rule-based logic replacing a complex neural network or ML model
    if params['koi_fpflag_nt'] == 1 or params['koi_fpflag_ss'] == 1:
        prediction = "FALSE POSITIVE"
        confidence = 99.99
        class_probas = {"CANDIDATE": 0.01, "FALSE POSITIVE": 99.9, "CONFIRMED": 0.09}
    elif params['koi_score'] >= 0.95 and params['koi_depth'] > 2000:
        prediction = "CONFIRMED EXOPLANET"
        confidence = 95.50
        class_probas = {"CANDIDATE": 3.0, "FALSE POSITIVE": 1.5, "CONFIRMED": 95.5}
    else:
        prediction = "CANDIDATE"
        confidence = 70.00
        class_probas = {"CANDIDATE": 70.0, "FALSE POSITIVE": 10.0, "CONFIRMED": 20.0}

    return prediction, confidence, class_probas # Returns AI-simulated results

st.sidebar.markdown('<div class="main-title">Exoplanet Analysis</div>', unsafe_allow_html=True)
st.sidebar.markdown("---")

input_params = {}

# Sidebar UI for parameter input
with st.sidebar:
    st.subheader("Key Transit Parameters")
    input_params['koi_score'] = st.number_input(
        "KOI Score (Signal Importance)",
        min_value=0.0, max_value=1.0, value=0.96, step=0.01, format="%.2f"
    )

    input_params['koi_period'] = st.number_input(
        "Orbital Period (days)",
        min_value=0.0, value=11.21, step=0.1
    )

    input_params['koi_depth'] = st.number_input(
        "Transit Depth (ppm)",
        min_value=0.0, value=2700.00, step=100.0
    )

    input_params['koi_impact'] = st.number_input(
        "Impact Parameter (0.0 to 1.0)",
        min_value=0.0, max_value=1.0, value=0.60, step=0.01
    )

    st.markdown("---")
    st.subheader("False Positive Flags")

    input_params['koi_fpflag_nt'] = st.selectbox(
        "Non-transit FP Flag (0: OK, 1: Light Problem)",
        options=[0, 1], index=0
    )

    input_params['koi_fpflag_ss'] = st.selectbox(
        "Stellar Single FP Flag (0: OK, 1: Suspected Binary Star)",
        options=[0, 1], index=0
    )

    input_params['koi_name'] = st.text_input(
        "KOI Object Name (Ex: K00082.01)",
        value="K00082.01"
    )

col_logo, col_title = st.columns([1, 10])

IMAGE_URL = "https://placehold.co/80x80/0c101c/22d3ee?text=NASA"

with col_logo:
    st.image(IMAGE_URL, width=60)

with col_title:
    st.markdown('<div class="main-title">üöÄ NASA Exoplanet Classifier</div>', unsafe_allow_html=True)
    st.markdown("This project uses an **AI model** trained on NASA exoplanet data (Kepler, K2, TESS, etc.).")

st.markdown("---")

status_placeholder = st.empty()
status_placeholder.success("‚úÖ **Model trained** and feature structure successfully loaded!")
col1, col2 = st.columns(2)
with col1:
    st.subheader("Single Classification")
st.markdown("---")

if st.button("Classify Exoplanet"):
    with st.spinner('üî≠ Analyzing parameters and predicting...'):
        try:
            # FIX APPLIED: This line was unindented or mis-indented in your last submission.
            prediction, confidence, class_probas = mock_classification(input_params)
            
            st.header("Classification Result")
            if "CONFIRMED" in prediction:
                alert_type = "success"
                icon_fa = ":star2:"
                color = "#fcd34d"
            elif "FALSE POSITIVE" in prediction:
                alert_type = "error"
                icon_fa = ":no_entry_sign:"
                color = "#ef4444"
            else:
                alert_type = "warning"
                icon_fa = ":mag:"
                color = "#f59e0b"

            col_pred, col_conf = st.columns([3, 1])

            with col_pred:
                st.markdown(f"**<span style='font-size: 1.8rem; color: {color};'>{icon_fa} Predicted Disposition:</span>** <span style='font-size: 1.8rem;'>{prediction}</span>", unsafe_allow_html=True)

            with col_conf:
                st.metric(label="Model Confidence", value=f"{confidence:.2f}%")

            st.markdown("---")
            st.subheader("Probability Distribution:")
            probas_df = pd.DataFrame(
                list(class_probas.items()),
                columns=['Class', 'Probability']
            )
            probas_df['Probability'] = probas_df['Probability'] / 100
            st.bar_chart(probas_df.set_index('Class'), height=300)
            st.dataframe(probas_df.style.format({'Probability': "{:.2%}"}), hide_index=True, use_container_width=True)


        except Exception as e:
            st.error(f"‚ùå Prediction Error: An error occurred. Please check the parameters or the **model API** status.")
            st.exception(e)

st.markdown("---")
